~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Curso Profesional de Git and GitHub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Iniciar el repositorio de Git

git init
git add README.md
	Git add .
	Esto para agregar todo.
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:deathz0a/Notes.git
git push -u origin main

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 6: Tipos de archivos y sus diferencias:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19938-editores-de-codigo-archivos-binarios-y-de-texto-pl/



	1. Archivos de texto(.txt): Texto plano normal. Lo vemos igual sin
	importar donde lo abramos, ya sea con el bloc de notas o con editores
	de texto avanzados.

	2. Archivos RTF(.rtf): Podemos guardar texto con diferentes tamanaños,
	estilos y colores, Pero si lo abrimos desde un editor de codigo, vamos
	a ver que es mucho mas complejo que solo el texto plano.  Esto es
	porque deve guardar todos los estilos del texto y para esto se usa un
	codigo muy diferente a los textos con estilos espeaciales al que
	estamos habituados.

	3. Archivos de WORD(.docx): Podemos guardar imagenes y texto con
	diferentes tamaños, estilos o colores. Al abrirlo desde un editor de
	codigo podemos ver que es codigo binario, muy dificil de entender y muy
	diferente al texto al que estamos acostumbrados. Esto es porque Word
	esta optimizado para entender este codigo especial y reprensentalo
	graficamente.


***Clase 6: Conceptos importantes de Git***

	1. Bug: Error en el código

	2. Repository: Donde se almacena todo el proyecto, el cual puede vivir
	tanto en local como en remoto. El repositorio guarda un historial de
	versiones y, más importante, de la relación de cada versión con la
	anterior para que pueda hacerse el árbol de versiones con las
	diferentes ramas.

	3. Fork: Si en algún momento queremos contribuir al proyecto de otra
	persona, o si queremos utilizar el proyecto de otro como el punto de
	partida del nuestro.  Esto se conoce como “fork”.

	4. Clone: Una vez se decide hacer un fork , hasta ese momento sólo
	existe en GitHub. Para poder trabajar en el proyecto, toca clonar el
	repositorio elegido al computador personal.

	5. Branch: Es una bifurcación del proyecto que se está realizando para
	anexar una nueva funcionalidad o corregir un bug.

	6. Master: Rama donde se almacena la última versión estable del
	proyecto que se está realizando. La rama master es la que está en
	producción en cada momento (o casi) y debería estar libre de bugs. Así,
	si esta rama está en producción, sirve como referente para hacer nuevas
	funcionalidades y/o arreglar bugs de última hora.

	7. Commit: consiste en subir cosas a la versión local del repositorio.
	De esta manera se puede trabajar en la rama de forma local sin tener
	que modificar ninguna versión en remoto ni tener que tener la última
	versión remota, cosa muy útil en grandes desarrollos trabajados por
	varias personas.

	8. Push: Consiste en enviar todo lo que se ha confirmado con un commit
	al repositorio remoto. Aquí es donde se une nuestro trabajo con el de
	los demás.

	9. Checkout: Acción de descargarse una rama del repositorio GIT local
	(sí, GIT tiene su propio repositorio en local para poder ir haciendo
	commits) o remoto.

	10. Fetch: Actualiza el repositorio local bajando datos del repositorio
	remoto al repositorio local sin actualizarlo, es decir, se guarda una
	copia del repositorio remoto en el local.

	11. Merge: La acción de merge es la continuación natural del fetch. El
	merge permite unir la copia del repositorio remoto con tu repositorio
	local, mezclando los diferentes códigos.

	12. Pull: Consiste en la unión del fetch y del merge, esto es, recoge
	la información del repositorio remoto y luego mezcla el trabajo en
	local con esta.

	
	13. Diff: Se utiliza para mostrar los cambios entre dos versiones del
	mismo archivo.




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 7: Introduccion a la terminal y linea de comandos(fast review)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19937-introduccion-a-la-terminal-y-linea-de-comandos/



	1. pwd: Indica el lugar de los directorios donde estoy ahora.

	2. ls -al: Muestra todos los directorios y archivos ocultos con un formato
	humano.

	3. cd <directorio1/directorio2/>: Ingresa a un directorio

	4. mkdir <directoryName>: Crea un directorio.  

	5. touch <directoryName>: Crea un archivo vacio.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Clase 8: Crea un repositorio de Git y haz tu primer commit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19936-crea-un-repositorio-de-git-y-haz-tu-primer-commit/



	Le indicaremos a Git que queremos crear un nuevo repositorio para
	utilizar su sistema de control de versiones. Solo debemos posicionarnos
	en la carpeta raíz de nuestro proyecto y ejecutar el comando:

		git init

	Recuerda que al ejecutar este comando (y de aquí en adelante) vamos a
	tener una nueva carpeta oculta llamada .git con toda la base de datos
	con cambios atómicos en nuestro proyecto.

	Recuerda que Git está optimizado para trabajar en equipo, por lo tanto,
	debemos darle un poco de información sobre nosotros. No debemos hacerlo
	todas las veces que ejecutamos un comando, basta con ejecutar solo una
	sola vez los siguientes comandos con tu información:

		git config --global user.email "tu@email.com" 

	git config --global user.name "Tu Nombre" Existen muchas otras
	configuraciones de Git que puedes encontrar ejecutando el comando git
	config --list (o solo git config para ver una explicación más
	detallada).

	Si quieres ver los archivos ocultos de una carpeta puedes habilitar la
	opción de Vista > Mostrar u ocultar > Elementos ocultos (en Windows) o
	ejecutar el comando ls -a.

***Clase 8: COMANDOS PARA INICIAR TU REPOSITORIO CON GIT***	

	1. git init: para inicializar el repositorio git y el staged.

	2. git add nombre_del_archivo.txt: enviar el archivo al staged.

	3. git status: ver el estado, si se requiere agregar al starget o si se
	requiere commit.

	4. git conf: para ver las posibles configuraciones.

	5. git conf --list: para ver la lista de configuraciones hechas

	6. git conf --list --show-origin: para mostrar las configuraciones y
	sus rutas

	7. git rm --cached nombre_del_archivo.txt: para eliminar el archivo del
	staged(ram)

	8. git rm nombre_del_archivo.txt: para eliminar del repositorio.


	Si por algún motivo te equivocaste en el nombre o email que
	configuraste al principio, lo puedes modificar de la siguiente manera: 

		git config --global --replace-all user.name “Aquí va tu nombre
		modificado” 

	O si lo deseas eliminar y añadir uno nuevo

		git config --global --unset-all user.name : Elimina el nombre
		del usuario 

		git config --global --add user.name “Aquí va tu nombre”


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 9: Analizar cambios en los archivos de tu proyecto con git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19936-crea-un-repositorio-de-git-y-haz-tu-primer-commit/



	El comando >>git show<< nos muestra los cambios que han existido sobre
	un archivo y es muy util para detectar cuando se produjeron ciertos
	cambios, que se rompio y como lo podemos solucionar. Pero podemos ser
	mas detallados.  

	Si queremos ver la direncia entre una version y otra, no necesitamos
	todos los cambios existentes desde la creacion del archivo. Podemos
	usar el comando >> git diff commitA commitB<<.  

	Recuerda que puedes obtener el ID de tus commits con el comando >>git
	log<<

***Clase 9.1: COMANDOS PARA ANALIZAR CAMBIOS EN GIT.*** 

	-git init: inicializar el repositorio

	-git add nombre_de_archivo.extensión: agregar el archivo al repositorio
	
	-git commit -m “Mensaje”: Agregamos los cambios para el repositorio
	
	-git add: Agregar los cambios de la carpeta en la que nos encontramos
	agregar todo

	-git status: visualizar cambios

	-git log nombre_de_archivos.extensión: histórico de cambios con
	detalles.
	
	-git push: envía a otro repositorio remoto lo que estamos haciendo

	-git pull: traer repositorio remoto

	-ls: listado de carpetas en donde me encuentro. Es decir, como emplear
	dir en windows.

	-pwd: ubicación actual

	-mkdir: make directory nueva carpeta

	-touch archivo.extensión: crear archivo vacío

	-cat archivo.extensión: muestra el contenido del archivo
	
	-history: historial de comandos utilizados durante esa sesión

	-rm archivo.extensión: Eliminación de archivo

	-comando --help: ayuda sobre el comando
	
	-git checkout: traer cambios realizados

	-git rm --cached archivo.extensión: se utiliza para devolver el archivo
	que se tiene en ram. Cuando escribimos git add, lo devuelve a estado
	natural mientras está en staging.

	-git config --list: muestra la lista de configuración de git

	-git config --list --show-origin: rutas de acceso a la configuración de
	git

	-git log archivo.extensión: muestra la historia del archivo.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 10: Que es el staging y los repositorios? Ciclo basico de trabajo en Git. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19946-que-es-el-staging-y-los-repositorios-ciclo-basico-/



	Para iniciar un repositorio, o sea, activar el sistema de control de
	versiones de Git en tu proyecto, solo debes ejecutar el comando git
	init.

	Este comando se encargará de dos cosas: primero, crear una carpeta
	.git, donde se guardará toda la base de datos con cambios atómicos de
	nuestro proyecto; y segundo, crear un área que conocemos como Staging,
	que guardará temporalmente nuestros archivos (cuando ejecutemos un
	comando especial para eso) y nos permitirá, más adelante, guardar estos
	cambios en el repositorio (también con un comando especial).

***Clase 10.1: Ciclo de vida o estados de los archivos en Git:***
>>Imagen ilustrativa:
	/home/deathzoa/personalProjects/Notes/Images/estadosGit.jpg

	Cuando trabajamos en Git nuestros archibos pueden vivir y moverse entre
	4 diferentes estados (cuando trabajamos con repositorios remotos pueden
	ser mas estados, pero los estuadiaremos mas adelante):

	1. Archivos Tracked: son los archivos que viven dentro de Git, no
	tienen cambios pendientes y sus últimas actualizaciones han sido
	guardadas en el repositorio gracias a los comandos git add y git
	commit.

	2. Archivos Staged: son archivos en Staging. Viven dentro de Git y hay
	registro de ellos porque han sido afectados por el comando git add,
	aunque no sus últimos cambios. Git ya sabe de la existencia de estos
	últimos cambios, pero todavía no han sido guardados definitivamente en
	el repositorio porque falta ejecutar el comando git commit.

	3. Archivos Unstaged: entiéndelos como archivos “Tracked pero
	Unstaged”. Son archivos que viven dentro de Git pero no han sido
	afectados por el comando git add ni mucho menos por git commit. Git
	tiene un registro de estos archivos, pero está desactualizado, sus
	últimas versiones solo están guardadas en el disco duro.

	4. Archivos Untracked: son archivos que NO viven dentro de Git, solo en
	el disco duro. Nunca han sido afectados por git add, así que Git no
	tiene registros de su existencia.  Recuerda que hay un caso muy raro
	donde los archivos tienen dos estados al mismo tiempo: staged y
	untracked. Esto pasa cuando guardas los cambios de un archivo en el
	área de Staging (con el comando git add), pero antes de hacer commit
	para guardar los cambios en el repositorio haces nuevos cambios que
	todavía no han sido guardados en el área de Staging (en realidad, todo
	sigue funcionando igual pero es un poco divertido).

***Clase 10.2: Comandos para mover archivos entro los estados de Git:***

	git status

		Nos permite ver el estado de todos nuestros archivos y
		carpetas.
	
	git add . 

		Nos ayuda a mover archivos del Untracked o Unstaged al estado
		Staged. Podemos usar git nombre-del-archivo-o-carpeta para
		añadir archivos y carpetas individuales o git add -A para mover
		todos los archivos de nuestro proyecto (tanto Untrackeds como
		unstageds).

	git reset HEAD

		Nos ayuda a sacar archivos del estado Staged para devolverlos a
		su estado anterior. Si los archivos venían de Unstaged, vuelven
		allí. Y lo mismo se venían de Untracked.
	
	git commit

		Nos ayuda a mover archivos de Unstaged a Tracked. Esta es una
		ocasión especial, los archivos han sido guardados o
		actualizados en el repositorio. Git nos pedirá que dejemos un
		mensaje para recordar los cambios que hicimos y podemos usar el
		argumento -m para escribirlo (git commit -m "mensaje").

	git rm

	Este comando necesita alguno de los siguientes argumentos para
	poder ejecutarse correctamente:
		
		git rm --cached

			Mueve los archivos que le indiquemos al estado
			Untracked.

		git rm --force

			Elimina los archivos de Git y del disco duro. Git
			guarda el registro de la existencia de los archivos,
			por lo que podremos recuperarlos si es necesario (pero
			debemos usar comandos más avanzados).


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 11: Que es un Branch (rama) y como funciona un Merge en Git?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19947-que-es-un-branch-rama-y-como-funciona-un-merge-en-/



***Clase 11: Recursos importantes para recodar y estudiar***

	1. git-flow cheatsheet (Varios Idiomas[Español incluido]:
	https://danielkummer.github.io/git-flow-cheatsheet/

	2. Gitflow Workflow:
	https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow

	En git, una rama o branch es una version del codigo del proyecto sobre
	el que estas trabajando. Estas ramas ayudan a mantener el orden en el
	control de versiones y manipular el codigo de forma segura.

	Ejemplo:
	https://static.platzi.com/media/user_upload/GIT_Branch-6809996b-6dec-48d7-9469-1412f337c25d.jpg

	Todos los commit se aplican sobre una rama. Por defecto, siempre
	empezamos en la rama Main  y generamos nuevas ramas a partir de esta
	para generar nuevos flujos de trabajo independientes.

***Clase11: Checkout y merge***

	Producir una nueva rama se conoce como >>Checkouk<<.

	Unir dos ramas se conoce como Merge. El codigo se fusiona originando
	una nueva version de la rama Master.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 12: Volver en el tiempo en nuestro repositorio utilizando reset y checkout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19948-volver-en-el-tiempo-en-nuestro-repositorio-utiliza/



	El comando git checkout + ID del commit nos permite viajar en el
	tiempo. Podemos volver a cualquier versión anterior de un archivo
	específico o incluso del proyecto entero. Esta también es la forma de
	crear ramas y movernos entre ellas.

	También hay una forma de hacerlo un poco más “ruda”: usando el comando
	git reset. En este caso, no solo “volvemos en el tiempo”, sino que
	borramos los cambios que hicimos después de este commit.

	Hay dos formas de usar git reset: con el argumento --hard, borrando
	toda la información que tengamos en el área de staging (y perdiendo
	todo para siempre). O, un poco más seguro, con el argumento --soft, que
	mantiene allí los archivos del área de staging para que podamos aplicar
	nuestros últimos cambios pero desde un commit anterior.

***Clase 12: Cómo usar Git Reset***

	Para volver a commits previos, borrando los cambios realizados desde
	ese commit, podemos utilizar:

	git reset --soft [SHA 1]: 

		Elimina los cambios hasta el staging area

	git reset --mixed [SHA 1]: 

		Elimina los cambios hasta el working area
	
	git reset --hard [SHA 1]: 

		Regresa hasta el commit del [SHA-1]
	
		Donde el SHA-1 es el identificador del commit.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 13: Git reset vs. Git rm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/23295-git-reset-vs-git-rm/



	Git reset y git rm son comandos con utilidades muy diferentes, pero se
	pueden confundir muy fácilmente.

***Clase 13: git rm***

	Este comando nos ayuda a eliminar archivos de Git sin eliminar su
	historial del sistema de versiones. Esto quiere decir que si
	necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y
	recuperar el último commit antes de borrar el archivo en cuestión.

	Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los
	flags para indicarle a Git cómo eliminar los archivos que ya no
	necesitamos en la última versión del proyecto:

	git rm --cached: 

		Elimina los archivos de nuestro repositorio local y del área de
		staging, pero los mantiene en nuestro disco duro.  Básicamente
		le dice a Git que deje de trackear el historial de cambios de
		estos archivos, por lo que pasaran a un estado untracked.

	git rm --force: 

		Elimina los archivos de Git y del disco duro. Git siempre
		guarda todo, por lo que podemos acceder al registro de la
		existencia de los archivos, de modo que podremos recuperarlos
		si es necesario (pero debemos usar comandos más avanzados).

***Clase 13: git reset***

	Este comando nos ayuda a volver en el tiempo. Pero no como git checkout
	que nos deja ir, mirar, pasear y volver. Con git reset volvemos al
	pasado sin la posibilidad de volver al futuro. Borramos la historia y
	la debemos sobreescribir. No hay vuelta atrás.

	Este comando es muy peligroso y debemos emplearlo solo en caso de
	emergencia. Recuerda que debemos usar alguna de estas dos opciones:

	Hay dos formas de utilizar git reset: con el argumento --hard, borrando
	toda la información que tengamos en el área de staging (y perdiendo
	todo para siempre). O, un poco más seguro, con el argumento --soft, que
	mantiene allí los archivos del área de staging para que podamos aplicar
	nuestros últimos cambios pero desde un commit anterior.

	1. git reset --soft: Borramos todo el historial y los registros de Git
	pero guardamos los cambios que tengamos en Staging, así podemos aplicar
	las últimas actualizaciones a un nuevo commit.

	2. git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda
	la información de los commits y del área de staging se borra del
	historial.

***Clase 13: ¡Pero todavía falta algo!***

	git reset HEAD: Este es el comando para sacar archivos del área de
	staging. No para borrarlos ni nada de eso, solo para que los últimos
	cambios de estos archivos no se envíen al último commit, a menos que
	cambiemos de opinión y los incluyamos de nuevo en staging con git add,
	por supuesto.

***Clase 13: ¿Por qué esto es importante?***

	Imagina el siguiente caso:

	Hacemos cambios en los archivos de un proyecto para una nueva
	actualización. Todos los archivos con cambios se mueven al área de
	staging con el comando git add. Pero te das cuenta de que uno de esos
	archivos no está listo todavía. Actualizaste el archivo, pero ese
	cambio no debe ir en el próximo commit por ahora.

	¿Qué podemos hacer?

	Bueno, todos los cambios están en el área de Staging, incluido el
	archivo con los cambios que no están listos. Esto significa que debemos
	sacar ese archivo de Staging para poder hacer commit de todos los
	demás.

	¡Al usar git rm lo que haremos será eliminar este archivo completamente
	de git! Todavía tendremos el historial de cambios de este archivo, con
	la eliminación del archivo como su última actualización. Recuerda que
	en este caso no buscábamos eliminar un archivo, solo dejarlo como
	estaba y actualizarlo después, no en este commit.

	En cambio, si usamos git reset HEAD, lo único que haremos será mover
	estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos
	cambios del archivo, el repositorio mantendrá el archivo (no con sus
	últimos cambios, pero sí con los últimos en los que hicimos commit) y
	no habremos perdido nada.

	Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un
	incendio en tu trabajo es conocer muy bien la diferencia y los riesgos
	de todos los comandos de Git.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 14: Flujo de trabajo básico con un repositorio remoto 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19935-flujo-de-trabajo-basico-con-un-repositorio-remoto/



	Cuando empiezas a trabajar en un entorno local, el proyecto vive
	únicamente en tu computadora. Esto significa que no hay forma de que
	otros miembros del equipo trabajen en él.

	Para solucionar esto, utilizamos los servidores remotos: un nuevo
	estado que deben seguir nuestros archivos para conectarse y trabajar
	con equipos de cualquier parte del mundo.

	Estos servidores remotos pueden estar alojados en GitHub, GitLab,
	BitBucket, entre otros. Lo que van a hacer es guardar el mismo
	repositorio que tienes en tu computadora y darnos una URL con la que
	todos podremos acceder a los archivos del proyecto. Así, el equipo
	podrá descargarlos, hacer cambios y volverlos a enviar al servidor
	remoto para que otras personas vean los cambios, comparen sus versiones
	y creen nuevas propuestas para el proyecto.

	Esto significa que debes aprender algunos nuevos comandos.

***Clase 14: Comandos para el trabajo remoto con GIT***

	git clone url_del_servidor_remoto

		Nos permite descargar los archivos de la última versión de la
		rama principal y todo el historial de cambios en la carpeta
		.git.

	git push

		Luego de hacer git add y git commit debemos ejecutar este
		comando para mandar los cambios al servidor remoto.  git fetch

		Lo usamos para traer actualizaciones del servidor remoto y
		guardarlas en nuestro repositorio local (en caso de que hayan,
		por supuesto).

	git merge

		También usamos el comando git merge con servidores remotos. Lo
		necesitamos para combinar los últimos cambios del servidor
		remoto y nuestro directorio de trabajo.

	git pull

		Básicamente, git fetch y git merge al mismo tiempo.

***Adicionalmente, tenemos otros comandos que nos sirven para trabajar en
proyectos muy grandes:***

	git log --oneline

		Te muestra el id commit y el título del commit.

	git log --decorate
		
		Te muestra donde se encuentra el head point en el log.
	
	git log --stat

		Explica el número de líneas que se cambiaron brevemente.

	git log -p

		Explica el número de líneas que se cambiaron y te muestra que
		se cambió en el contenido.

	git shortlog

		Indica que commits ha realizado un usuario, mostrando el
		usuario y el título de sus commits.

	git log --graph --oneline --decorate ; git log --pretty=format:"%cn
	hizo un commit %h el dia %cd"

		Muestra mensajes personalizados de los commits.

	git log -3

		Limitamos el número de commits.

	git log --after=“2018-1-2”

	git log --after=“today” ; git log --after=“2018-1-2” --before=“today”

		Commits para localizar por fechas.  git log --author=“Name
		Author”: Commits hechos por autor que cumplan exactamente con
		el nombre.
	
	git log --grep=“INVIE”

		Busca los commits que cumplan tal cual está escrito entre las
		comillas.

	git log --grep=“INVIE” –i

		Busca los commits que cumplan sin importar mayúsculas o
		minúsculas.

	git log – index.html

		Busca los commits en un archivo en específico.

	git log -S “Por contenido”

		Buscar los commits con el contenido dentro del archivo.

	git log > log.txt

		Guardar los logs en un archivo txt


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 15: Introducción a las ramas o branches de Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19940-introduccion-a-las-ramas-o-branches-de-git/



	Las ramas son la forma de hacer cambios en nuestro proyecto sin afectar
	el flujo de trabajo de la rama principal. Esto porque queremos trabajar
	una parte muy específica de la aplicación o simplemente experimentar.

	La cabecera o HEAD representan la rama y el commit de esa rama donde
	estamos trabajando. Por defecto, esta cabecera aparecerá en el último
	commit de nuestra rama principal. Pero podemos cambiarlo al crear una
	rama (git branch rama, git checkout -b rama) o movernos en el tiempo a
	cualquier otro commit de cualquier otra rama con los comandos (git
	reset id-commit, git checkout rama-o-id-commit).

***Clase 15: Cómo funcionan las ramas en GIT***

	Las ramas son la manera de hacer cambios en nuestro proyecto sin
	afectar el flujo de trabajo de la rama principal. Esto porque queremos
	trabajar una parte muy específica de la aplicación o simplemente
	experimentar.

	git branch -nombre de la rama-

		Con este comando se genera una nueva rama.

	git checkout -nombre de la rama-

		Con este comando puedes saltar de una rama a otra.

	git checkout -b rama

		Genera una rama y nos mueve a ella automáticamente, Es decir,
		es la combinación de git brach y git checkout al mismo tiempo.

	git reset id-commit

		Nos lleva a cualquier commit no importa la rama, ya que
		identificamos el id del tag., eliminando el historial de los
		commit posteriores al tag seleccionado.

	git checkout rama-o-id-commit

		Nos lleva a cualquier commit sin borrar los commit posteriores
		al tag seleccionado.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 16: Fusión de ramas con Git merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19939-funcion-de-ramas-con-git-mer-7/


	El comando git merge nos permite crear un nuevo commit con la
	combinación de dos ramas o branches (la rama donde nos encontramos
	cuando ejecutamos el comando y la rama que indiquemos después del
	comando).

***Clase 16: Cómo usar Git merge***

	En este ejemplo, vamos a crear un nuevo commit en la rama master
	combinando los cambios de una rama llamada cabecera:

		git checkout master

		git merge cabecera

	Otra opción es crear un nuevo commit en la rama cabecera combinando los
	cambios de cualquier otra rama:

		git checkout cabecera

		git merge cualquier-otra-rama

	Asombroso, ¿verdad? Es como si Git tuviera superpoderes para saber qué
	cambios queremos conservar de una rama y qué otros de la otra. El
	problema es que no siempre puede adivinar, sobre todo en algunos casos
	donde dos ramas tienen actualizaciones diferentes en ciertas líneas en
	los archivos. Esto lo conocemos como un conflicto.

	Recuerda que al ejecutar el comando git checkout para cambiar de rama o
	commit puedes perder el trabajo que no hayas guardado. Guarda siempre
	tus cambios antes de hacer git checkout.

***Clase 16: Comandos básicos de GitHub***

		git init: crear un repositorio.

		git add: agregar un archivo a staging.
	
		git commit -m “mensaje”: guardar el archivo en git con un
		mensaje.

		git branch: crear una nueva rama.

		git checkout: moverse entre ramas.

		git push: mandar cambios a un servidor remoto.

		git fetch: traer actualizaciones del servidor remoto y
		guardarlas en nuestro repositorio local.

		git merge: tiene dos usos. Uno es la fusión de ramas,
		funcionando como un commit en la rama actual, trayendo la rama
		indicada. Su otro uso es guardar los cambios de un servidor
		remoto en nuestro directorio.
	
		git pull: fetch y merge al mismo tiempo.

***Clase 16: Comandos para corrección en GitHub***


		git checkout “codigo de version” “nombre del archivo”: volver a
		la última versión de la que se ha hecho commit.

		git reset: vuelve al pasado sin posibilidad de volver al
		futuro, se debe usar con especificaciones.

		git reset --soft: vuelve a la versión en el repositorio, pero
		guarda los cambios en staging. Así, podemos aplicar
		actualizaciones a un nuevo commit.

		git reset --hard: todo vuelve a su versión anterior

		git reset HEAD: saca los cambios de staging, pero no los borra.
		Es lo opuesto a git add.
		
		git rm: elimina los archivos, pero no su historial. Si queremos
		recuperar algo, solo hay que regresar. se utiliza así:

		git rm --cached elimina los archivos en staging pero los
		mantiene en el disco duro.

		git rm --force elimina los archivos de git y del disco duro.

***Clase 16: Comandos para revisión y comparación en GitHub***

		git status: estado de archivos en el repositorio.

		git log: historia entera del archivo.

		git log --stat: cambios específicos en el archivo a partir de
		un commit.

		git show: cambios históricos y específicos hechos en un
		archivo.

		git diff “codigo de version 1” “codigo de version 2”: comparar
		cambios entre versiones.

		git diff: comparar directorio con staging.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 17: Resolución de conflictos al hacer un merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19941-resolucion-de-conflictos-al-hacer-un-merge/



	Git nunca borra nada, a menos que nosotros se lo indiquemos. Cuando
	usamos los comandos git merge o git checkout estamos cambiando de rama
	o creando un nuevo commit, no borrando ramas ni commits (recuerda que
	puedes borrar commits con git reset y ramas con git branch -d).

	Git es muy inteligente y puede resolver algunos conflictos
	automáticamente: cambios, nuevas líneas, entre otros. Pero algunas
	veces no sabe cómo resolver estas diferencias, por ejemplo, cuando dos
	ramas diferentes hacen cambios distintos a una misma línea.

	Esto lo conocemos como conflicto y lo podemos resolver manualmente.
	Solo debemos hacer el merge, ir a nuestro editor de código y elegir si
	queremos quedarnos con alguna de estas dos versiones o algo diferente.
	Algunos editores de código como Visual Studio Code nos ayudan a
	resolver estos conflictos sin necesidad de borrar o escribir líneas de
	texto, basta con hacer clic en un botón y guardar el archivo.

	Recuerda que siempre debemos crear un nuevo commit para aplicar los
	cambios del merge. Si Git puede resolver el conflicto, hará commit
	automáticamente. Pero, en caso de no pueda resolverlo, debemos
	solucionarlo y hacer el commit.

	Los archivos con conflictos por el comando git merge entran en un nuevo
	estado que conocemos como Unmerged. Funcionan muy parecido a los
	archivos en estado Unstaged, algo así como un estado intermedio entre
	Untracked y Unstaged. Solo debemos ejecutar git add para pasarlos al
	área de staging y git commit para aplicar los cambios en el
	repositorio.

***Clase 17: Cómo revertir un merge***

	Si nos hemos equivocado y queremos cancelar el merge, debemos usar el
	siguiente comando:

		git merge --abort

***Clase 17: Conflictos en repositorios remotos***

	Al trabajar con otras personas, es necesario utilizar un repositorio
	remoto.

	Para copiar el repositorio remoto al directorio de trabajo local, se
	utiliza el comando git clone <url>, y para enviar cambios al
	repositorio remoto se utiliza git push.

		Para actualizar el repositorio local se hace uso del comando
		git fetch, luego se debe fusionar los datos traídos con los
		locales usando git merge.

		Para traer los datos y fusionarlos a la vez, en un solo
		comando, se usa git pull.  

			Para crear commits rápidamente, fusionando git add y
			git commit -m "", usamos git commit -am "".  
		
			Para generar nuevas ramas, hay que posicionarse sobre
			la rama que se desea copiar y utilizar el comando git
			branch <nombre>.

		Para saltar entre ramas, se usa el comando git checkout
		<branch>

			Una vez realizado los cambios en la rama, estas deben
			fusionarse con git merge.

		El merge ocurre en la rama en la que se está
			posicionado. Por lo tanto, la rama a fusionar se
			transforma en la principal.  

		Los merges también son commits.
	
		Los merges pueden generar conflictos, esto aborta la acción y
		pide que soluciones el problema manualmente, aceptando o
		rechazando los cambios que vienen.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 19: Uso de GitHub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19942-uso-de-github/



	GitHub es una plataforma que nos permite guardar repositorios de Git
	que podemos usar como servidores remotos y ejecutar algunos comandos de
	forma visual e interactiva (sin necesidad de la consola de comandos).

	Luego de crear nuestra cuenta, podemos crear o importar repositorios,
	crear organizaciones y proyectos de trabajo, descubrir repositorios de
	otras personas, contribuir a esos proyectos, dar estrellas y muchas
	otras cosas.

	El README.md es el archivo que veremos por defecto al entrar a un
	repositorio. Es una muy buena práctica configurarlo para describir el
	proyecto, los requerimientos y las instrucciones que debemos seguir
	para contribuir correctamente.

	Para clonar un repositorio desde GitHub (o cualquier otro servidor
	remoto) debemos copiar la URL (por ahora, usando HTTPS) y ejecutar el
	comando git clone + la URL que acabamos de copiar. Esto descargará la
	versión de nuestro proyecto que se encuentra en GitHub.

	Sin embargo, esto solo funciona para las personas que quieren empezar a
	contribuir en el proyecto.

***Clase 19: Como conectar un repositorio de Github a nuestro documento
local***

	Si queremos conectar el repositorio de GitHub con nuestro repositorio
	local, que creamos usando el comando git init, debemos ejecutar las
	siguientes instrucciones:

		1. Guardar la URL del repositorio de GitHub con el nombre de
		origin

			git remote add origin URL 

		2. Verificar que la URL se haya guardado correctamente:
			
				git remote

				git remote -v

		3. Traer la versión del repositorio remoto y hacer merge para
		crear un commit con los archivos de ambas partes. Podemos usar
		git fetch y git merge o solo git pull con el flag
		--allow-unrelated-histories:

			git pull origin master --allow-unrelated-histories

		1. Por último, ahora sí podemos hacer git push para guardar los
		cambios de nuestro repositorio local en GitHub:

			git push origin master


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 21: Configura tus llaves SSH en local
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19950-configurar-llaves-ssh-en-github/



	En este ejemplo, aprenderemos cómo configurar nuestras llaves SSH en
	local.

***Clase 21: Como generar tus llaves SSH***

	1. Generar tus llaves SSH**
		
		Recuerda que es muy buena idea proteger tu llave privada con
		una contraseña.

		ssh-keygen -t rsa -b 4096 -C "tu@email.com"

	2. Terminar de configurar nuestro sistema.

		En Windows y Linux:

			Encender el “servidor” de llaves SSH de tu computadora:

				eval $(ssh-agent -s)

			Añadir tu llave SSH a este “servidor”:

				ssh-add ruta-donde-guardaste-tu-llave-privada

		En Mac:

			Encender el “servidor” de llaves SSH de tu computadora:

				eval "$(ssh-agent -s)"

			Si usas una versión de OSX superior a Mac Sierra
			(v10.12), debes crear o modificar un archivo “config”
			en la carpeta de tu usuario con el siguiente contenido
			(ten cuidado con las mayúsculas): Host *

			AddKeysToAgent yes UseKeychain yes IdentityFile
			ruta-donde-guardaste-tu-llave-privada

			Añadir tu llave SSH al “servidor” de llaves SSH de tu
			computadora (en caso de error puedes ejecutar este
			mismo comando pero sin el argumento -K):

				ssh-add -K ruta-donde-guardaste-tu-llave-privada


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 22: Conexión a GitHub con SSH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19951-conexion-a-github-con-ssh/



	La creación de las SSH es necesario solo una vez por cada computadora.
	Aquí conocerás cómo conectar a GitHub usando SSH.

	Luego de crear nuestras llaves SSH podemos entregarle la llave pública
	a GitHub para comunicarnos de forma segura y sin necesidad de escribir
	nuestro usuario y contraseña todo el tiempo.

	Para esto debes entrar a la Configuración de Llaves SSH en GitHub,
	crear una nueva llave con el nombre que le quieras dar y el contenido
	de la llave pública de tu computadora.

	Ahora podemos actualizar la URL que guardamos en nuestro repositorio
	remoto, solo que, en vez de guardar la URL con HTTPS, vamos a usar la
	URL con SSH:

		ssh git remote set-url origin url-ssh-del-repositorio-en-github

***Clase 22: Comandos para copiar la llave SSH:***

	MAC

		pbcopy < ~/.ssh/id_rsa.pub

	Windows (Git Bash)

		clip < ~/.ssh/id_rsa.pub

	Linux

		cat ~/.ssh/id_rsa.pub




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 23: Tags y versiones en Git y GitHub 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19952-tags-y-versiones-en-git-y-github/



	Los tags o etiquetas nos permiten asignar versiones a los commits con
	cambios más importantes o significativos de nuestro proyecto.

***Clase 23: Comandos para trabajar con etiquetas***

	1. Crear un nuevo tag y asignarlo a un commit: git tag -a
	nombre-del-tag id-del-commit.

	2. Borrar un tag en el repositorio local: git tag -d nombre-del-tag.
	
	3.Listar los tags de nuestro repositorio local: git tag o git show-ref
	--tags.  4. Publicar un tag en el repositorio remoto: git push origin
	--tags.
	
	5.Borrar un tag del repositorio remoto: git tag -d nombre-del-tag y git
	push origin :refs/tags/nombre-del-tag.

	Para generar un comando complejo con varios comandos de una forma
	optimizada, utilizamos conjuntos de sentencias conocidas como alias.

***Clase 23: Como agregar alias solo para git***

	1. Para un proyecto:
			
		git config alias.arbolito "log --all --graph --decorate
		--oneline"

	2. Global

		git config --global alias.arbolito "log --all --graph
		--decorate --oneline"

	3. Para correrlo:

		git arbolito


***Clase 23: Como agregar comandos tipo alias a zsh***
	1. Conocer que bash estamos corriendo.
		
		echo $SHELL

	2. Ir a tu directorio home si aun no estas en el.

		cd ~

	3. Ingresar a la siguiente ruta:

		cd ~/.oh-my-zsh/custom/

	4. Crear un directorio con extension .zsh

		touch aliases.zsh

	5. En este archivo podremos guardar nuestros alias para zsh.
		
		alias arbolito='git log --all --graph --decorate --oneline'

		alias superlog="git log --graph --abbrev-commit --decorate
		--date=relative --format=format:'%C(bold blue)%h%C(reset) -
		%C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim
		white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

	6. Guardar los cambios en el archivo y dentro de la conzola escribir el
	siguiente comando actuazlizar cambios a bash:

		source ~/.zshrc

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 24: Manejo de ramas en GitHub 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19953-manejo-de-ramas-en-github/


	Si no te funciona el comando gitk es posible no lo tengas instalado por
	defecto.  Para instalar gitk debemos ejecutar los siguientes comandos:
	sudo apt-get update sudo apt-get install gitk

	Las ramas nos permiten hacer cambios a nuestros archivos sin modificar
	la versión principal (master). Puedes trabajar con ramas que nunca
	envías a GitHub, así como pueden haber ramas importantes en GitHub que
	nunca usas en el repositorio local. Lo crucial es que aprendas a
	manejarlas para trabajar profesionalmente.

	Si, estando en otra rama, modificamos los archivos y hacemos commit,
	tanto el historial(git log) como los archivos serán afectados. La
	ventaja que tiene usar ramas es que las modificaciones solo afectarán a
	esa rama en particular. Si luego de “guardar” los archivos(usando
	commit) nos movemos a otra rama (git checkout otraRama) veremos como
	las modificaciones de la rama pasada no aparecen en la otraRama.

***Clase 24: Comandos para menejo de ramas en GitHub***

	* Crear una rama:

		git branch branchName

	* Movernos a otra rama:

		git checkout branchName

	* Crear una rama en el repositorio local:

		git branch nombre-de-la-rama o git checkout -b
		nombre-de-la-rama.

	* Publicar una rama local al repositorio remoto:

		git push origin nombre-de-la-rama.

	Recuerda que podemos ver gráficamente nuestro entorno y flujo de
	trabajo local con Git utilizando el comando gitk. Gitk fue el primer
	visor gráfico que se desarrolló para ver de manera gráfica el historial
	de un repositorio de Git.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 25: Configurar múltiples colaboradores en un repositorio de GitHub 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19954-configurar-multiples-colaboradores-en-un-repositor/


Por defecto, cualquier persona puede clonar o descargar tu proyecto desde GitHub, pero no pueden crear commits, ni ramas. Esto quiere decir que pueden copiar tu proyecto pero no colaborar con él. Existen varias formas de solucionar esto para poder aceptar contribuciones. Una de ellas es añadir a cada persona de nuestro equipo como colaborador de nuestro repositorio.


***Clase 25: Como agregar colaboradores en GitHub***

	Solo debemos entrar a la configuración de colaboradores de nuestro proyecto. Se encuentra en:

		Repositorio > Settings > Collaborators

	Ahí, debemos añadir el email o username de los nuevos colaboradores.

	Si, como colaborador, agregaste erróneamente el mensaje del commit, lo puedes cambiar de la siguiente manera:

		Hacer un commit con el nuevo mensaje que queremos, esto nos abre el editor de texto de la terminal:

			git commit —amend

		Corregimos el mensaje

		Traer el repositorio remoto

			git pull origin master

		Ejecutar el cambio

			git push --set-upstream origin master



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 26: Flujo de trabajo profesional: Haciendo merge de ramas de desarrollo a master
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Para poder desarrollar software de manera óptima y ordenada,
	necesitamos tener un flujo de trabajo profesional, que nos permita
	trabajar en conjunto sin interrumpir el trabajo de otros
	desarrolladores. Una buena práctica de flujo de trabajo sería la
	siguiente:

		Crear ramas
	
		Asignar una rama a cada programador
		
		El programador baja el repositorio con git pull origin master
		
		El programador cambia de rama
		
		El programador trabaja en esa rama y hace commits
		
		El programador sube su trabajo con git push origin #nombre_rama
		
		El encargado de organizar el proyecto baja, revisa y unifica
		todos los cambios


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 27: Flujo de trabajo profesional con Pull requests 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19956-flujo-de-trabajo-profesional-con-pull-requests/

	En un entorno profesional normalmente se bloquea la rama master, y para
	enviar código a dicha rama pasa por un code review y luego de su
	aprobación se unen códigos con los llamados merge request.

	Para realizar pruebas enviamos el código a servidores que normalmente
	los llamamos staging develop (servidores de pruebas) luego de que se
	realizan las pruebas pertinentes tanto de código como de la aplicación
	estos pasan al servidor de producción con el ya antes mencionado merge
	request.

	Los PR (pull requests) son la base de la colaboración a proyectos Open
	Source, si tienen pensando colaborar en alguno es muy importante
	entender esto y ver cómo se hace en las próximas clases. Por lo general
	es forkear el proyecto, implementar el cambio en una nueva rama, hacer
	el PR y esperar que los administradores del proyecto hagan el merge o
	pidan algún cambio en el código o commits que hiciste.

	***Proceso de un pull request para trabajo en producción:***
	
		Un pull request es un estado intermedio antes de enviar el
		merge.
	
		El pull request permite que otros miembros del equipo revisen
		el código y así aprobar el merge a la rama.

		Permite a las personas que no forman el equipo, trabajar y
		colaborar con una rama.

		La persona que tiene la responsabilidad de aceptar los pull
		request y hacer los merge tienen un perfil especial y son
		llamados DevOps.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 28: Utilizando Pull Requests en GitHub 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19957-utilizando-pull-requests-en-github/'

	Pull request es una funcionalidad de Github (en Gitlab llamada merge
	request y en Bitbucket push request), en la que un colaborador pide que
	revisen sus cambios antes de hacer merge a una rama, normalmente master
	(ahora conocida como main).

	Al hacer un pull request, se genera una conversación que pueden seguir
	los demás usuarios del repositorio, así como autorizar y rechazar los
	cambios.

	***Cómo se realiza un pull request***

		Se trabaja en una rama paralela los cambios que se desean git
		checkout -b <rama>.

		Se hace un commit a la rama git commit -am '<Comentario>'.  Se
		suben al remoto los cambios git push origin <rama>.

		En GitHub se hace el pull request comparando la rama master con
		la rama del fix.

		Uno, o varios colaboradores revisan que el código sea correcto
		y dan feedback (en el chat del pull request).
		
		El colaborador hace los cambios que desea en la rama y lo
		vuelve a subir al remoto (automáticamente jala la historia de
		los cambios que se hagan en la rama, en remoto).

		Se aceptan los cambios en GitHub.

		Se hace merge a master desde GitHub.

	Importante: Cuando se modifica una rama, también se modifica el pull
	request.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 29: Creando un Fork, contribuyendo a un repositorio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19978-creando-un-fork-contribuyendo-a-un-repositorio/

	Los forks o bifurcaciones son una característica única de GitHub en la
	que se crea una copia exacta del estado actual de un repositorio
	directamente en GitHub. Este repositorio podrá servir como otro origen
	y se podrá clonar (como cualquier otro repositorio). En pocas palabras,
	lo podremos utilizar como un nuevo repositorio git cualquiera

	Un fork es como una bifurcación del repositorio completo. Comparte una
	historia en común con el original, pero de repente se bifurca y pueden
	aparecer varios cambios, ya que ambos proyectos podrán ser modificados
	en paralelo y para estar al día un colaborador tendrá que estar
	actualizando su fork con la información del original.

	Al hacer un fork de un poryecto en GitHub, te conviertes en dueñ@ del
	repositorio fork, puedes trabajar en este con todos los permisos, pero
	es un repositorio completamente diferente que el original, teniendo
	solamente alguna historia en común (como crédito al creado o creadora
	original).

	Los forks son importantes porque es la manera en la que funciona el
	open source, ya que, una persona puede no ser colaborador de un
	proyecto, pero puede contribuír al mismo, haciendo mejor software que
	pueda ser utilizado por cualquiera.

	***Cómo se hace un fork remoto desde consola en GitHub***

	Al hacer un fork, GitHub sabe que se hizo el fork del proyecto, por lo
	que se le permite al colaborador hacer pull request desde su
	repositorio propio.

	Cuando trabajas en un proyecto que existe en diferentes repositorios
	remotos (normalmente a causa de un fork), es muy probable que desees
	poder trabajar con ambos repositorios. Para esto, puedes generar un
	remoto adicional desde consola.

		git remote add <nombre_del_remoto> <url_del_remoto> 
		
		git remote upstream https://github.com/freddier/hyperblog

	Al crear un remoto adicional, podremos hacer pull desde el nuevo
	origen. En caso de tener permisos, podremos hacer fetch y push.

		git pull <remoto> <rama> 

		git pull upstream master

	Este pull nos traerá los cambios del remoto, por lo que se estará al
	día en el proyecto. El flujo de trabajo cambia, en adelante se estará
	trabajando haciendo pull desde el upstream y push al origin para pasar
	a hacer pull request.

		git pull upstream master git push origin master


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 30: Haciendo deployment a un servidor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19958-haciendo-deployment-a-un-servidor/


