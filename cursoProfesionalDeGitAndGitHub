~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Curso Profesional de Git and GitHub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 6: Tipos de archivos y sus diferencias:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19938-editores-de-codigo-archivos-binarios-y-de-texto-pl/



	1. Archivos de texto(.txt): Texto plano normal. Lo vemos igual sin
	importar donde lo abramos, ya sea con el bloc de notas o con editores
	de texto avanzados.

	2. Archivos RTF(.rtf): Podemos guardar texto con diferentes tamanaños,
	estilos y colores, Pero si lo abrimos desde un editor de codigo, vamos
	a ver que es mucho mas complejo que solo el texto plano.  Esto es
	porque deve guardar todos los estilos del texto y para esto se usa un
	codigo muy diferente a los textos con estilos espeaciales al que
	estamos habituados.

	3. Archivos de WORD(.docx): Podemos guardar imagenes y texto con
	diferentes tamaños, estilos o colores. Al abrirlo desde un editor de
	codigo podemos ver que es codigo binario, muy dificil de entender y muy
	diferente al texto al que estamos acostumbrados. Esto es porque Word
	esta optimizado para entender este codigo especial y reprensentalo
	graficamente.


***Clase 6: Conceptos importantes de Git***

	1. Bug: Error en el código

	2. Repository: Donde se almacena todo el proyecto, el cual puede vivir
	tanto en local como en remoto. El repositorio guarda un historial de
	versiones y, más importante, de la relación de cada versión con la
	anterior para que pueda hacerse el árbol de versiones con las
	diferentes ramas.

	3. Fork: Si en algún momento queremos contribuir al proyecto de otra
	persona, o si queremos utilizar el proyecto de otro como el punto de
	partida del nuestro.  Esto se conoce como “fork”.

	4. Clone: Una vez se decide hacer un fork , hasta ese momento sólo
	existe en GitHub. Para poder trabajar en el proyecto, toca clonar el
	repositorio elegido al computador personal.

	5. Branch: Es una bifurcación del proyecto que se está realizando para
	anexar una nueva funcionalidad o corregir un bug.

	6. Master: Rama donde se almacena la última versión estable del
	proyecto que se está realizando. La rama master es la que está en
	producción en cada momento (o casi) y debería estar libre de bugs. Así,
	si esta rama está en producción, sirve como referente para hacer nuevas
	funcionalidades y/o arreglar bugs de última hora.

	7. Commit: consiste en subir cosas a la versión local del repositorio.
	De esta manera se puede trabajar en la rama de forma local sin tener
	que modificar ninguna versión en remoto ni tener que tener la última
	versión remota, cosa muy útil en grandes desarrollos trabajados por
	varias personas.

	8. Push: Consiste en enviar todo lo que se ha confirmado con un commit
	al repositorio remoto. Aquí es donde se une nuestro trabajo con el de
	los demás.

	9. Checkout: Acción de descargarse una rama del repositorio GIT local
	(sí, GIT tiene su propio repositorio en local para poder ir haciendo
	commits) o remoto.

	10. Fetch: Actualiza el repositorio local bajando datos del repositorio
	remoto al repositorio local sin actualizarlo, es decir, se guarda una
	copia del repositorio remoto en el local.

	11. Merge: La acción de merge es la continuación natural del fetch. El
	merge permite unir la copia del repositorio remoto con tu repositorio
	local, mezclando los diferentes códigos.

	12. Pull: Consiste en la unión del fetch y del merge, esto es, recoge
	la información del repositorio remoto y luego mezcla el trabajo en
	local con esta.

	
	13. Diff: Se utiliza para mostrar los cambios entre dos versiones del
	mismo archivo.




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 7: Introduccion a la terminal y linea de comandos(fast review)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19937-introduccion-a-la-terminal-y-linea-de-comandos/



	1. pwd: Indica el lugar de los directorios donde estoy ahora.

	2. ls -al: Muestra todos los directorios y archivos ocultos con un formato
	humano.

	3. cd <directorio1/directorio2/>: Ingresa a un directorio

	4. mkdir <directoryName>: Crea un directorio.  

	5. touch <directoryName>: Crea un archivo vacio.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Clase 8: Crea un repositorio de Git y haz tu primer commit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19936-crea-un-repositorio-de-git-y-haz-tu-primer-commit/



	Le indicaremos a Git que queremos crear un nuevo repositorio para
	utilizar su sistema de control de versiones. Solo debemos posicionarnos
	en la carpeta raíz de nuestro proyecto y ejecutar el comando:

		git init

	Recuerda que al ejecutar este comando (y de aquí en adelante) vamos a
	tener una nueva carpeta oculta llamada .git con toda la base de datos
	con cambios atómicos en nuestro proyecto.

	Recuerda que Git está optimizado para trabajar en equipo, por lo tanto,
	debemos darle un poco de información sobre nosotros. No debemos hacerlo
	todas las veces que ejecutamos un comando, basta con ejecutar solo una
	sola vez los siguientes comandos con tu información:

		git config --global user.email "tu@email.com" 

	git config --global user.name "Tu Nombre" Existen muchas otras
	configuraciones de Git que puedes encontrar ejecutando el comando git
	config --list (o solo git config para ver una explicación más
	detallada).

	Si quieres ver los archivos ocultos de una carpeta puedes habilitar la
	opción de Vista > Mostrar u ocultar > Elementos ocultos (en Windows) o
	ejecutar el comando ls -a.

***Clase 8: COMANDOS PARA INICIAR TU REPOSITORIO CON GIT***	

	1. git init: para inicializar el repositorio git y el staged.

	2. git add nombre_del_archivo.txt: enviar el archivo al staged.

	3. git status: ver el estado, si se requiere agregar al starget o si se
	requiere commit.

	4. git conf: para ver las posibles configuraciones.

	5. git conf --list: para ver la lista de configuraciones hechas

	6. git conf --list --show-origin: para mostrar las configuraciones y
	sus rutas

	7. git rm --cached nombre_del_archivo.txt: para eliminar el archivo del
	staged(ram)

	8. git rm nombre_del_archivo.txt: para eliminar del repositorio.


	Si por algún motivo te equivocaste en el nombre o email que
	configuraste al principio, lo puedes modificar de la siguiente manera: 

		git config --global --replace-all user.name “Aquí va tu nombre
		modificado” 

	O si lo deseas eliminar y añadir uno nuevo

		git config --global --unset-all user.name : Elimina el nombre
		del usuario 

		git config --global --add user.name “Aquí va tu nombre”


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 9: Analizar cambios en los archivos de tu proyecto con git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19936-crea-un-repositorio-de-git-y-haz-tu-primer-commit/



	El comando >>git show<< nos muestra los cambios que han existido sobre
	un archivo y es muy util para detectar cuando se produjeron ciertos
	cambios, que se rompio y como lo podemos solucionar. Pero podemos ser
	mas detallados.  

	Si queremos ver la direncia entre una version y otra, no necesitamos
	todos los cambios existentes desde la creacion del archivo. Podemos
	usar el comando >> git diff commitA commitB<<.  

	Recuerda que puedes obtener el ID de tus commits con el comando >>git
	log<<

***Clase 9.1: COMANDOS PARA ANALIZAR CAMBIOS EN GIT.*** 

	-git init: inicializar el repositorio

	-git add nombre_de_archivo.extensión: agregar el archivo al repositorio
	
	-git commit -m “Mensaje”: Agregamos los cambios para el repositorio
	
	-git add: Agregar los cambios de la carpeta en la que nos encontramos
	agregar todo

	-git status: visualizar cambios

	-git log nombre_de_archivos.extensión: histórico de cambios con
	detalles.
	
	-git push: envía a otro repositorio remoto lo que estamos haciendo

	-git pull: traer repositorio remoto

	-ls: listado de carpetas en donde me encuentro. Es decir, como emplear
	dir en windows.

	-pwd: ubicación actual

	-mkdir: make directory nueva carpeta

	-touch archivo.extensión: crear archivo vacío

	-cat archivo.extensión: muestra el contenido del archivo
	
	-history: historial de comandos utilizados durante esa sesión

	-rm archivo.extensión: Eliminación de archivo

	-comando --help: ayuda sobre el comando
	
	-git checkout: traer cambios realizados

	-git rm --cached archivo.extensión: se utiliza para devolver el archivo
	que se tiene en ram. Cuando escribimos git add, lo devuelve a estado
	natural mientras está en staging.

	-git config --list: muestra la lista de configuración de git

	-git config --list --show-origin: rutas de acceso a la configuración de
	git

	-git log archivo.extensión: muestra la historia del archivo.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 10: Que es el staging y los repositorios? Ciclo basico de trabajo en Git. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19946-que-es-el-staging-y-los-repositorios-ciclo-basico-/



	Para iniciar un repositorio, o sea, activar el sistema de control de
	versiones de Git en tu proyecto, solo debes ejecutar el comando git
	init.

	Este comando se encargará de dos cosas: primero, crear una carpeta
	.git, donde se guardará toda la base de datos con cambios atómicos de
	nuestro proyecto; y segundo, crear un área que conocemos como Staging,
	que guardará temporalmente nuestros archivos (cuando ejecutemos un
	comando especial para eso) y nos permitirá, más adelante, guardar estos
	cambios en el repositorio (también con un comando especial).

***Clase 10.1: Ciclo de vida o estados de los archivos en Git:***
>>Imagen ilustrativa:
	/home/deathzoa/personalProjects/Notes/Images/estadosGit.jpg

	Cuando trabajamos en Git nuestros archibos pueden vivir y moverse entre
	4 diferentes estados (cuando trabajamos con repositorios remotos pueden
	ser mas estados, pero los estuadiaremos mas adelante):

	1. Archivos Tracked: son los archivos que viven dentro de Git, no
	tienen cambios pendientes y sus últimas actualizaciones han sido
	guardadas en el repositorio gracias a los comandos git add y git
	commit.

	2. Archivos Staged: son archivos en Staging. Viven dentro de Git y hay
	registro de ellos porque han sido afectados por el comando git add,
	aunque no sus últimos cambios. Git ya sabe de la existencia de estos
	últimos cambios, pero todavía no han sido guardados definitivamente en
	el repositorio porque falta ejecutar el comando git commit.

	3. Archivos Unstaged: entiéndelos como archivos “Tracked pero
	Unstaged”. Son archivos que viven dentro de Git pero no han sido
	afectados por el comando git add ni mucho menos por git commit. Git
	tiene un registro de estos archivos, pero está desactualizado, sus
	últimas versiones solo están guardadas en el disco duro.

	4. Archivos Untracked: son archivos que NO viven dentro de Git, solo en
	el disco duro. Nunca han sido afectados por git add, así que Git no
	tiene registros de su existencia.  Recuerda que hay un caso muy raro
	donde los archivos tienen dos estados al mismo tiempo: staged y
	untracked. Esto pasa cuando guardas los cambios de un archivo en el
	área de Staging (con el comando git add), pero antes de hacer commit
	para guardar los cambios en el repositorio haces nuevos cambios que
	todavía no han sido guardados en el área de Staging (en realidad, todo
	sigue funcionando igual pero es un poco divertido).

***Clase 10.2: Comandos para mover archivos entro los estados de Git:***

	-git status: nos permite ver el estado de todos nuestros archivos y
	carpetas.
	
	-git add: nos ayuda a mover archivos del Untracked o Unstaged al estado
	Staged. Podemos usar git nombre-del-archivo-o-carpeta para añadir
	archivos y carpetas individuales o git add -A para mover todos los
	archivos de nuestro proyecto (tanto Untrackeds como unstageds).

	-git reset HEAD: nos ayuda a sacar archivos del estado Staged para
	devolverlos a su estado anterior. Si los archivos venían de Unstaged,
	vuelven allí. Y lo mismo se venían de Untracked.
	
	-git commit: nos ayuda a mover archivos de Unstaged a Tracked. Esta es
	una ocasión especial, los archivos han sido guardados o actualizados en
	el repositorio. Git nos pedirá que dejemos un mensaje para recordar los
	cambios que hicimos y podemos usar el argumento -m para escribirlo (git
	commit -m "mensaje").

	-git rm: este comando necesita alguno de los siguientes argumentos para
	poder ejecutarse correctamente:
		
		git rm --cached: Mueve los archivos que le indiquemos al estado
		Untracked.

	-git rm --force: Elimina los archivos de Git y del disco duro. Git
	guarda el registro de la existencia de los archivos, por lo que
	podremos recuperarlos si es necesario (pero debemos usar comandos más
	avanzados).


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 11: Que es un Branch (rama) y como funciona un Merge en Git?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19947-que-es-un-branch-rama-y-como-funciona-un-merge-en-/



***Clase 11: Recursos importantes para recodar y estudiar***

	1. git-flow cheatsheet (Varios Idiomas[Español incluido]:
	https://danielkummer.github.io/git-flow-cheatsheet/

	2. Gitflow Workflow:
	https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow

	En git, una rama o branch es una version del codigo del proyecto sobre
	el que estas trabajando. Estas ramas ayudan a mantener el orden en el
	control de versiones y manipular el codigo de forma segura.

	Ejemplo:
	https://static.platzi.com/media/user_upload/GIT_Branch-6809996b-6dec-48d7-9469-1412f337c25d.jpg

	Todos los commit se aplican sobre una rama. Por defecto, siempre
	empezamos en la rama Main  y generamos nuevas ramas a partir de esta
	para generar nuevos flujos de trabajo independientes.

***Clase11: Checkout y merge***

	Producir una nueva rama se conoce como >>Checkouk<<.

	Unir dos ramas se conoce como Merge. El codigo se fusiona originando
	una nueva version de la rama Master.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Clase 12:
Volver en el tiempo en nuestro repositorio utilizando reset y checkout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19948-volver-en-el-tiempo-en-nuestro-repositorio-utiliza/



	El comando git checkout + ID del commit nos permite viajar en el
	tiempo. Podemos volver a cualquier versión anterior de un archivo
	específico o incluso del proyecto entero. Esta también es la forma de
	crear ramas y movernos entre ellas.

	También hay una forma de hacerlo un poco más “ruda”: usando el comando
	git reset. En este caso, no solo “volvemos en el tiempo”, sino que
	borramos los cambios que hicimos después de este commit.

	Hay dos formas de usar git reset: con el argumento --hard, borrando
	toda la información que tengamos en el área de staging (y perdiendo
	todo para siempre). O, un poco más seguro, con el argumento --soft, que
	mantiene allí los archivos del área de staging para que podamos aplicar
	nuestros últimos cambios pero desde un commit anterior.

***Clase 12: Cómo usar Git Reset***

	Para volver a commits previos, borrando los cambios realizados desde
	ese commit, podemos utilizar:

	git reset --soft [SHA 1]: elimina los cambios hasta el staging area

	git reset --mixed [SHA 1]: elimina los cambios hasta el working area
	
	git reset --hard [SHA 1]: regresa hasta el commit del [SHA-1]
	
	Donde el SHA-1 es el identificador del commit.
