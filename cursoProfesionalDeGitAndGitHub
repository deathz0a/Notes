~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Curso Profesional de Git and GitHub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 6: Tipos de archivos y sus diferencias:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19938-editores-de-codigo-archivos-binarios-y-de-texto-pl/



	1. Archivos de texto(.txt): Texto plano normal. Lo vemos igual sin
	importar donde lo abramos, ya sea con el bloc de notas o con editores
	de texto avanzados.

	2. Archivos RTF(.rtf): Podemos guardar texto con diferentes tamanaños,
	estilos y colores, Pero si lo abrimos desde un editor de codigo, vamos
	a ver que es mucho mas complejo que solo el texto plano.  Esto es
	porque deve guardar todos los estilos del texto y para esto se usa un
	codigo muy diferente a los textos con estilos espeaciales al que
	estamos habituados.

	3. Archivos de WORD(.docx): Podemos guardar imagenes y texto con
	diferentes tamaños, estilos o colores. Al abrirlo desde un editor de
	codigo podemos ver que es codigo binario, muy dificil de entender y muy
	diferente al texto al que estamos acostumbrados. Esto es porque Word
	esta optimizado para entender este codigo especial y reprensentalo
	graficamente.


***Clase 6: Conceptos importantes de Git***

	1. Bug: Error en el código

	2. Repository: Donde se almacena todo el proyecto, el cual puede vivir
	tanto en local como en remoto. El repositorio guarda un historial de
	versiones y, más importante, de la relación de cada versión con la
	anterior para que pueda hacerse el árbol de versiones con las
	diferentes ramas.

	3. Fork: Si en algún momento queremos contribuir al proyecto de otra
	persona, o si queremos utilizar el proyecto de otro como el punto de
	partida del nuestro.  Esto se conoce como “fork”.

	4. Clone: Una vez se decide hacer un fork , hasta ese momento sólo
	existe en GitHub. Para poder trabajar en el proyecto, toca clonar el
	repositorio elegido al computador personal.

	5. Branch: Es una bifurcación del proyecto que se está realizando para
	anexar una nueva funcionalidad o corregir un bug.

	6. Master: Rama donde se almacena la última versión estable del
	proyecto que se está realizando. La rama master es la que está en
	producción en cada momento (o casi) y debería estar libre de bugs. Así,
	si esta rama está en producción, sirve como referente para hacer nuevas
	funcionalidades y/o arreglar bugs de última hora.

	7. Commit: consiste en subir cosas a la versión local del repositorio.
	De esta manera se puede trabajar en la rama de forma local sin tener
	que modificar ninguna versión en remoto ni tener que tener la última
	versión remota, cosa muy útil en grandes desarrollos trabajados por
	varias personas.

	8. Push: Consiste en enviar todo lo que se ha confirmado con un commit
	al repositorio remoto. Aquí es donde se une nuestro trabajo con el de
	los demás.

	9. Checkout: Acción de descargarse una rama del repositorio GIT local
	(sí, GIT tiene su propio repositorio en local para poder ir haciendo
	commits) o remoto.

	10. Fetch: Actualiza el repositorio local bajando datos del repositorio
	remoto al repositorio local sin actualizarlo, es decir, se guarda una
	copia del repositorio remoto en el local.

	11. Merge: La acción de merge es la continuación natural del fetch. El
	merge permite unir la copia del repositorio remoto con tu repositorio
	local, mezclando los diferentes códigos.

	12. Pull: Consiste en la unión del fetch y del merge, esto es, recoge
	la información del repositorio remoto y luego mezcla el trabajo en
	local con esta.

	
	13. Diff: Se utiliza para mostrar los cambios entre dos versiones del
	mismo archivo.




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 7: Introduccion a la terminal y linea de comandos(fast review)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19937-introduccion-a-la-terminal-y-linea-de-comandos/



	1. pwd: Indica el lugar de los directorios donde estoy ahora.

	2. ls -al: Muestra todos los directorios y archivos ocultos con un formato
	humano.

	3. cd <directorio1/directorio2/>: Ingresa a un directorio

	4. mkdir <directoryName>: Crea un directorio.  

	5. touch <directoryName>: Crea un archivo vacio.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Clase 8: Crea un repositorio de Git y haz tu primer commit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19936-crea-un-repositorio-de-git-y-haz-tu-primer-commit/



	Le indicaremos a Git que queremos crear un nuevo repositorio para
	utilizar su sistema de control de versiones. Solo debemos posicionarnos
	en la carpeta raíz de nuestro proyecto y ejecutar el comando:

		git init

	Recuerda que al ejecutar este comando (y de aquí en adelante) vamos a
	tener una nueva carpeta oculta llamada .git con toda la base de datos
	con cambios atómicos en nuestro proyecto.

	Recuerda que Git está optimizado para trabajar en equipo, por lo tanto,
	debemos darle un poco de información sobre nosotros. No debemos hacerlo
	todas las veces que ejecutamos un comando, basta con ejecutar solo una
	sola vez los siguientes comandos con tu información:

		git config --global user.email "tu@email.com" 

	git config --global user.name "Tu Nombre" Existen muchas otras
	configuraciones de Git que puedes encontrar ejecutando el comando git
	config --list (o solo git config para ver una explicación más
	detallada).

	Si quieres ver los archivos ocultos de una carpeta puedes habilitar la
	opción de Vista > Mostrar u ocultar > Elementos ocultos (en Windows) o
	ejecutar el comando ls -a.

***Clase 8: COMANDOS PARA INICIAR TU REPOSITORIO CON GIT***	

	1. git init: para inicializar el repositorio git y el staged.

	2. git add nombre_del_archivo.txt: enviar el archivo al staged.

	3. git status: ver el estado, si se requiere agregar al starget o si se
	requiere commit.

	4. git conf: para ver las posibles configuraciones.

	5. git conf --list: para ver la lista de configuraciones hechas

	6. git conf --list --show-origin: para mostrar las configuraciones y
	sus rutas

	7. git rm --cached nombre_del_archivo.txt: para eliminar el archivo del
	staged(ram)

	8. git rm nombre_del_archivo.txt: para eliminar del repositorio.


	Si por algún motivo te equivocaste en el nombre o email que
	configuraste al principio, lo puedes modificar de la siguiente manera: 

		git config --global --replace-all user.name “Aquí va tu nombre
		modificado” 

	O si lo deseas eliminar y añadir uno nuevo

		git config --global --unset-all user.name : Elimina el nombre
		del usuario 

		git config --global --add user.name “Aquí va tu nombre”


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	Clase 8: Analizar cambios en los archivos de tu proyecto con git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://platzi.com/clases/1557-git-github/19936-crea-un-repositorio-de-git-y-haz-tu-primer-commit/



	El comando >>git show<< nos muestra los cambios que han existido sobre un
archivo y es muy util para detectar cuando se produjeron ciertos cambios, que
se rompio y como lo podemos solucionar. Pero podemos ser mas detallados.  

	Si queremos ver la direncia entre una version y otra, no necesitamos todos los
cambios existentes desde la creacion del archivo. Podemos usar el comando >>
git diff commitA commitB<<.  

	Recuerda que puedes obtener el ID de tus commits con el comando >>git log<<

***Clase 8: COMANDOS PARA ANALIZAR CAMBIOS EN GIT.***
	-git init: inicializar el repositorio

	-git add nombre_de_archivo.extensión: agregar el archivo al repositorio
	
	-git commit -m “Mensaje”: Agregamos los cambios para el repositorio
	
	-git add: Agregar los cambios de la carpeta en la que nos encontramos agregar todo

	-git status: visualizar cambios

	-git log nombre_de_archivos.extensión: histórico de cambios con detalles
	
	-git push: envía a otro repositorio remoto lo que estamos haciendo

	-git pull: traer repositorio remoto

	-ls: listado de carpetas en donde me encuentro. Es decir, como emplear dir en windows.
pwd: ubicación actual
mkdir: make directory nueva carpeta
touch archivo.extensión: crear archivo vacío
cat archivo.extensión: muestra el contenido del archivo
history: historial de comandos utilizados durante esa sesión
rm archivo.extensión: Eliminación de archivo
comando --help: ayuda sobre el comando
git checkout: traer cambios realizados
git rm --cached archivo.extensión: se utiliza para devolver el archivo que se tiene en ram. Cuando escribimos git add, lo devuelve a estado natural mientras está en staging.
git config --list: muestra la lista de configuración de git
git config --list --show-origin: rutas de acceso a la configuración de git
git log archivo.extensión: muestra la historia del archivo
